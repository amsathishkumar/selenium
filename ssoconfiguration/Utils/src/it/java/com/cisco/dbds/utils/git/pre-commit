#!/bin/sh -x
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

# Redirect output to stderr.
exec 1>&2


echo "-------------------------------------------------------------------"
echo "PRE-COMMIT: Running pre commit hook..."
POM=$(git ls-files --full-name | grep pom.xml)
ROOTDIR=$(git rev-parse --show-toplevel)
POMFILE=$ROOTDIR/$POM

function abort() {
    rm -f tmp
    exit $RET 
}

echo "PRE-COMMIT: Checking if there are cucumber keyword errors..."
which javac > /dev/null 2>&1
RET=$?
[ $? != 0 ] && abort 

if [ -z "$USER" ]
then
    USER=${USERNAME}
fi

COMMONSJAR=C:\\Users\\${USER}\\.m2\\repository\\commons-io\\commons-io\\2.2\\commons-io-2.2.jar
UTILSJAR=$( find ~/.m2/repository/com/cisco/dbds/Utils/ -name *.jar | tail -1 | sed 's!c!C:!' | sed 's!^/!!' | sed 's!/!\\\\!g')


if [ -f "${COMMONSJAR}" -a "${UTILSJAR}" ]
then
    java -classpath "${COMMONSJAR};${UTILSJAR}" com.cisco.dbds.utils.git.CucumberFileChecker > tmp 2>&1
    RET=$?
    [ "${RET}" != 0 ] && echo "PRE-COMMIT: Error encountered while trying to check for correctness of cucumber tag syntax!" && abort

    if [ -s tmp ]
    then
        cat tmp
        RET=1
        abort
    fi
else
    echo "PRE-COMMIT: ${COMMONSJAR} and ${UTILSJAR} not found! Please have this jar to continue commit!" && abort
fi

echo "PRE-COMMIT: Checking if there are no java compilation errors..."
if [ -f ${POMFILE} ]
then
    TAG="@""TAGONE"$(date +%s)

    # Complilation check in here
    mvn clean integration-test -Dcucumber.options="--tags @{$TAG}" -Dencoding="UTF-8" -f ${POMFILE} > tmp 2>&1
    grep "Errors: 0" tmp > /dev/null 2>&1
    RET=$?

    if [ "${RET}" != 0 ]
    then
        echo
        echo "PRE-COMMIT: Errors seem to exist... Listing the log below..."
        grep 'ERROR' tmp 
        echo
        cat tmp
        abort
    fi
fi


#echo "PRE-COMMIT: Checking if the current commit has whitespace errors, printing the offending file names and failing..."
#if git rev-parse --verify HEAD >/dev/null 2>&1
#then
#	against=HEAD
#else
#	# Initial commit: diff against an empty tree object
#	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
#fi
#
## If you want to allow non-ASCII filenames set this variable to true.
#allownonascii=$(git config hooks.allownonascii)
#
#
## Cross platform projects tend to avoid non-ASCII filenames; prevent
## them from being added to the repository. We exploit the fact that the
## printable range starts at the space character and ends with tilde.
#if [ "$allownonascii" != "true" ] &&
#	# Note that the use of brackets around a tr range is ok here, (it's
#	# even required, for portability to Solaris 10's /usr/bin/tr), since
#	# the square bracket bytes happen to fall in the designated range.
#	test $(git diff --cached --name-only --diff-filter=A -z $against |
#	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
#then
#	cat <<\EOF
#Error: Attempt to add a non-ASCII file name.
#
#This can cause problems if you want to work with people on other platforms.
#
#To be portable it is advisable to rename the file.
#
#If you know what you are doing you can disable this check using:
#
#  git config hooks.allownonascii true
#EOF
#	exit 1
#fi
#
## If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --

rm -f tmp
